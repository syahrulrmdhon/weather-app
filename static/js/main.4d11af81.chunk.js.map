{"version":3,"sources":["components/Titles.js","components/Form.js","components/Cuaca.js","App.js","serviceWorker.js","index.js"],"names":["Titles","react_default","a","createElement","className","React","Component","Form","onSubmit","this","props","getCuaca","ref","onChange","handleChange","value","Cuaca","cityName","scope","name","main","map","item","key","dt","dt_txt","temp","temp_kf","error","API_KEY","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","cityID","api_call","data","wrap","_context","prev","next","preventDefault","state","fetch","concat","sent","json","console","log","setState","list","city","message","stop","_x","apply","arguments","bind","assertThisInitialized","id","target","components_Titles","components_Form","components_Cuaca","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4d11af81.chunk.js","sourcesContent":["import React from 'react'\n\nclass Titles extends React.Component {\n    render () {\n        return (\n            <div>\n                <h1 className='title-container__title'>Cuaca App</h1>\n                <p className='title-container__subtitle'> cari tau Cuaca disana...</p>\n            </div>\n        );\n    }\n}\n\nexport default Titles","import React from 'react'\n\nclass Form extends React.Component {\n\n    render () {\n        return (\n            <form className=\"margin\" onSubmit = {this.props.getCuaca}>\n                <select className=\"form-control margin\" ref=\"city\" onChange={this.props.handleChange}>\n                    <option value=\"\">Pilih Kota</option>\n                    <option value={1642911}>Jakarta, ID</option>\n                    <option value={1880252}>Singapore, SG</option>\n                    <option value={1609350}>Bangkok, TH</option>\n                    <option value={1733045}>Kuala Lumpur, MY</option>\n                </select>\n                <button>Search</button>\n            </form>\n        ); \n    }\n}\n\nexport default Form","import React from 'react'\n\nclass Cuaca extends React.Component {\n    render () {\n        return (\n            <div>\n                <table className=\"table table-dark margin\">\n                    <thead>\n                    { this.props.cityName && \n                            <tr>\n                                <th scope=\"col\">{this.props.cityName.name}</th>\n                                <th scope=\"col\">Suhu</th>\n                                <th scope=\"col\">Perbedaan</th>\n                            </tr>\n                    }\n                    </thead>\n                    <tbody>\n                    { this.props.main.map(item =>(\n                            <tr key={item.dt}>\n                                <td>{item.dt_txt}</td>\n                                <td>{item.main.temp}&#8451;</td>\n                                <td>{item.main.temp_kf}</td>\n                            </tr>\n                    ))}\n                    </tbody>\n                </table>\n                { this.props.error &&\n                    <p className='weather__key'>{this.props.error}</p>\n                }\n            </div>\n        );\n    }\n}\n\nexport default Cuaca","import React, { Component } from 'react';\n\nimport Titles from './components/Titles';\nimport Form from './components/Form';\nimport Cuaca from './components/Cuaca';\n\nimport './App.css';\n\nconst API_KEY = (\"407353b415c4d164751653261c13fecc\");\n\nclass App extends Component {\n\n  constructor (props) {\n    super(props);\n    this.state = {\n      cityID: '',\n      main: [\n\n      ],\n      cityName: '',\n      error: ''\n    }\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n\n  handleChange(e) {\n    let id = e.target.value;\n    if(id) {\n      this.setState({\n        cityID: id\n      })\n    }\n  }\n\n  getCuaca = async (e) => {\n    e.preventDefault();\n    const cityID = this.state.cityID; \n    // const country = e.target.elements.country.value;\n    const api_call = await fetch(`https://api.openweathermap.org/data/2.5/forecast?id=${cityID}&appid=${API_KEY}&units=metric&cnt=5`);\n    const data = await api_call.json();\n\n    console.log(data);\n\n    if (cityID) {\n\n      this.setState({\n        main: data.list,\n        cityName: data.city,\n        error: ''\n      });\n\n    } else {\n\n      this.setState({\n        main: [],\n        cityName: '',\n        error: data.message\n      });\n\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <div className='wrapper'>\n          <div className='main'>\n            <div className='container'>\n              <div className='row'>\n                <div className='col-sm-5 title-container'>\n                  <Titles/>\n                </div>\n                <div className='col-sm-7 form-container'>\n                  <Form getCuaca={this.getCuaca} handleChange={this.handleChange}/>\n                  <Cuaca \n                    main = {this.state.main}\n                    cityName = {this.state.cityName}\n                    error = {this.state.error}\n                  />\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}